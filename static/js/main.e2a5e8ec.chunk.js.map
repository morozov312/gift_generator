{"version":3,"sources":["Components/constants.js","Components/ResultContext/context.js","Assets/images/big_gift.png","Assets/images/smal_gifts.svg","Assets/images/cut_gift.svg","Components/Welcome/main.png","Components/Welcome/Welcome.js","Components/TestContainer/TestAnswers/TestAnswers.js","Components/TestContainer/ProgressBar/ProgressBar.js","Components/TestContainer/TestContainer.js","Components/Result/Result.js","Components/App.js","index.js"],"names":["WELCOME","TEST","RESULT","resultAnswers","createContext","Welcome","showTest","className","src","mainImg","alt","onClick","Answers","answers","clickUpdate","useContext","Context","map","answer","index","name","type","value","e","push","target","saveResult","text","ProgressBar","barLength","selected","progressItems","Array","i","id","getId","isActive","isAnimate","TestContainer","showResult","useState","current","setCurrent","questionsBase","length","question","Result","showWelcome","resultsArr","giftsArr","forEach","giftsCount","data","randomGiftIndex","Math","floor","random","useEffect","title","process","filename","effect","App","visible","setVisible","isHidden","Provider","bigGift","cutGift","smallGifts","state","setState","renderItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2a5e8ec.chunk.js","sourcesContent":["export const WELCOME = 'welcome'\nexport const TEST = 'test'\nexport const RESULT = 'result'\n","import {createContext} from 'react'\n\nconst resultAnswers = createContext([])\n\nexport default resultAnswers","export default __webpack_public_path__ + \"static/media/big_gift.e40b6ccd.png\";","export default __webpack_public_path__ + \"static/media/smal_gifts.f1eaffc1.svg\";","export default __webpack_public_path__ + \"static/media/cut_gift.a81b30f8.svg\";","export default __webpack_public_path__ + \"static/media/main.0048fc95.png\";","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Welcome.scss'\nimport mainImg from './main.png'\n\nfunction Welcome({showTest}) {\n    return (\n        <div className=\"welcome\">\n            <div>\n                <img src={mainImg} alt=\"main\" className=\"welcome__img\"/>\n            </div>\n            <div className=\"welcome__btn-container\">\n                <button className=\"welcome__btn\" onClick={() => showTest()}>Пройти тест</button>\n            </div>\n        </div>\n    )\n}\n\nWelcome.propTypes = {\n    showTest: PropTypes.func\n}\n\nexport default Welcome","import React, {useContext} from 'react'\nimport PropTypes from 'prop-types'\nimport './TestAnswers.scss'\nimport Context from '../../ResultContext/context'\n\nfunction Answers({answers, clickUpdate}) {\n    const resultAnswers = useContext(Context)\n\n    function saveResult(e) {\n        clickUpdate()\n        resultAnswers.push(e.target.value)\n    }\n\n    return (\n        <form className=\"testAnswers\">\n            {\n                answers.map((answer, index) =>\n                    <label key={answer.value} className=\"testAnswers__answer\">\n                        <input\n                            name={`group${index}`}\n                            type=\"radio\"\n                            value={answer.value}\n                            onClick={(e) => saveResult(e)}\n                        />\n                        {answer.text}\n                    </label>)\n            }\n        </form>\n    )\n}\n\nAnswers.propTypes = {\n    answers: PropTypes.arrayOf(PropTypes.object),\n    clickUpdate: PropTypes.func\n}\n\nexport default Answers","import React from 'react'\nimport PropTypes from 'prop-types'\nimport getId from 'uniqid'\nimport './ProgressBar.scss'\n\nfunction ProgressBar({barLength, selected}) {\n    const progressItems = Array(barLength)\n\n    for (let i = 0; i < barLength; ++i) {\n        progressItems[i] = {\n            id: getId(),\n            isActive: (i < selected) ? 'active' : ''\n        }\n    }\n\n    return (\n        <div className=\"progressBar\">\n            {\n                progressItems.map((i, index) => {\n                    const isAnimate = (index === (selected - 1)) ? 'animate' : ''\n                    return (\n                        <div key={i.id} className=\"progressBar__item\">\n                            <div className={`circle ${i.isActive} ${isAnimate}`}/>\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nProgressBar.propTypes = {\n    barLength: PropTypes.number,\n    selected: PropTypes.number\n}\n\nexport default ProgressBar","import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\nimport questionsBase from './questionBase.json'\nimport './TestContainer.scss'\nimport TestAnswers from './TestAnswers/TestAnswers'\nimport ProgressBar from './ProgressBar/ProgressBar'\n\nfunction TestContainer({showResult}) {\n    let [current, setCurrent] = useState(0)\n\n    function update() {\n        if (current < questionsBase.length - 1) setCurrent(current + 1)\n        else showResult()\n    }\n\n    return (\n        <div className=\"test\">\n            <ProgressBar barLength={questionsBase.length} selected={current}/>\n            <div className=\"test__item\">\n                <p>{questionsBase[current].question}</p>\n                <TestAnswers answers={questionsBase[current].answers} clickUpdate={update}/>\n            </div>\n        </div>\n    )\n}\n\nTestContainer.propTypes = {\n    showResult: PropTypes.func\n}\n\nexport default TestContainer","import React, {useEffect} from 'react'\nimport PropTypes from 'prop-types'\nimport {LazyLoadImage} from 'react-lazy-load-image-component'\nimport 'react-lazy-load-image-component/src/effects/blur.css'\nimport './Result.scss'\nimport data from './resultAnswers.json'\n\nfunction Result({showWelcome, resultsArr}) {\n\n    const giftsArr = []\n\n    resultsArr.forEach((i, index) => {\n        const giftsCount = data[index][i].length\n        const randomGiftIndex = Math.floor(Math.random() * giftsCount)\n        giftsArr.push(data[index][i][randomGiftIndex])\n    })\n\n    useEffect(() => {\n        return () => {\n            resultsArr.length = 0\n        }\n    }, [resultsArr]);\n\n\n    return (\n        <div className=\"result\">\n            {giftsArr.map(i =>\n                <div key={i.filename}>\n                    <h3 className=\"result__title\">{i.title}</h3>\n                    <LazyLoadImage\n                        src={`${process.env.PUBLIC_URL}/images/${i.filename}`}\n                        alt={i.title}\n                        className=\"result__img\"\n                        effect=\"blur\"\n                    />\n                </div>\n            )}\n            <button className=\"result__btn\" onClick={() => showWelcome()}>Пройти тест снова</button>\n        </div>\n    )\n}\n\nResult.propTypes = {\n    showWelcome: PropTypes.func,\n    resultsArr: PropTypes.arrayOf(PropTypes.string)\n}\n\nexport default Result","import React, {useState} from 'react'\nimport {WELCOME, TEST, RESULT} from './constants'\nimport Context from './ResultContext/context'\nimport './App.scss'\nimport bigGift from '../Assets/images/big_gift.png'\nimport smallGifts from '../Assets/images/smal_gifts.svg'\nimport cutGift from '../Assets/images/cut_gift.svg'\nimport Welcome from './Welcome/Welcome'\nimport TestContainer from './TestContainer/TestContainer'\nimport Result from './Result/Result'\n\nconst resultAnswers = []\n\nfunction App() {\n    let [visible, setVisible] = useState(WELCOME)\n\n    function renderItem(state, setState) {\n        switch (state) {\n            default:\n            case WELCOME:\n                return <Welcome showTest={() => setState(TEST)}/>\n            case TEST:\n                return <TestContainer showResult={() => setState(RESULT)}/>\n            case RESULT:\n                return <Result showWelcome={() => setState(WELCOME)} resultsArr={resultAnswers}/>\n        }\n    }\n\n    const isHidden = (visible === RESULT) ? 'hiddenImg' : ''\n\n    return (\n        <Context.Provider value={resultAnswers}>\n            <img src={bigGift} alt=\"big gift\" className={\"giftImg giftImg-big \" + isHidden}/>\n            <img src={cutGift} alt=\"cut gift logo\" className={\"giftImg giftImg-cut \" + isHidden}/>\n            <img src={smallGifts} alt=\"small gifts\" className={\"giftImg giftImg-small \" + isHidden}/>\n            <main className=\"content\">\n                {renderItem(visible, setVisible)}\n            </main>\n        </Context.Provider>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './Assets/styles/index.scss'\nimport App from './Components/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}